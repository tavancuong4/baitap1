{"ast":null,"code":"import axios from \"axios\";\nimport * as Types from \"./acctionTypes\";\nimport { callAPIStarWar } from \"../services/callAPI\";\nexport const callAPI = () => async dispatch => {\n  const data = await callAPIStarWar();\n  dispatch({\n    type: Types.FETCH_POSTS_SUCCESS,\n    data: data,\n    random: data[0]\n  });\n};\nexport const fetchData = () => async dispatch => {\n  try {\n    dispatch({\n      type: Types.FETCH_POSTS_REQUEST\n    });\n    let page = 1;\n    let arr = [];\n    (async function () {\n      let res = await axios.get(`https://swapi.dev/api/starships/?page=${page}`);\n      let data = res && res.data ? res.data : [];\n      arr = arr.concat(data.results);\n      if (data.next) {\n        page += 1;\n        let res = await axios.get(`https://swapi.dev/api/starships/?page=${page}`);\n        arr = arr.concat(res.data.results);\n        if (data.next) {\n          page += 1;\n          let res = await axios.get(`https://swapi.dev/api/starships/?page=${page}`);\n          arr = arr.concat(res.data.results);\n          if (data.next) {\n            page += 1;\n            let res = await axios.get(`https://swapi.dev/api/starships/?page=${page}`);\n            arr = arr.concat(res.data.results);\n            let index11 = Math.floor(Math.random() * arr.length);\n            dispatch({\n              type: Types.FETCH_POSTS_SUCCESS,\n              data: arr,\n              random: arr[index11]\n            });\n          } else {\n            console.log(\"Hết data\");\n            return arr;\n          }\n        }\n      }\n    })();\n    handleRandomMe();\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: Types.FETCH_POSTS_ERROR,\n      message: error\n    });\n  }\n};\nexport const handleRandomMachine = () => async dispatch => {\n  try {\n    dispatch({\n      type: Types.RANDOM_MACHINE\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: Types.FETCH_POSTS_ERROR,\n      message: error\n    });\n  }\n};\nexport const handleRandomMe = () => async dispatch => {\n  try {\n    dispatch({\n      type: Types.RANDOM_ME\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: Types.FETCH_POSTS_ERROR,\n      message: error\n    });\n  }\n};\nexport const loadData = () => async dispatch => {\n  try {\n    dispatch({\n      type: Types.FETCH_POSTS_REQUEST\n    });\n    const url = \"https://jsonplaceholder.typicode.com/posts\";\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch({\n      type: Types.FETCH_POSTS_SUCCESS,\n      data: responseBody\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: Types.FETCH_POSTS_ERROR,\n      message: error\n    });\n  }\n};\nexport const actAddTotal = () => {\n  return {\n    type: Types.ADD_TOTAL\n  };\n};\nexport const actDeleteTotal = () => {\n  return {\n    type: Types.RESET_TOTAL\n  };\n};\nexport const actFetchData = data => {\n  return {\n    type: \"data/fetchData\",\n    data\n  };\n};\nexport const actDeleteData = id => {\n  return {\n    type: \"data/deleteData\",\n    id\n  };\n};\nexport const actDeleteCount = id => {\n  return {\n    type: \"countDelete\",\n    id\n  };\n};\nexport const actAddCount = id => {\n  return {\n    type: \"countAdd\",\n    id\n  };\n};\nexport const actDeleteCount2 = id => {\n  return {\n    type: \"countDelete2\",\n    id\n  };\n};\nexport const actAddCount2 = id => {\n  return {\n    type: \"countAdd2\",\n    id\n  };\n};\n// export const actFetchData = (data) => {\n//   return {\n//     type: Types.FETCH_DATA,\n//     data,\n//   };\n// };\n// export const actDeleteData = (id) => {\n//   return {\n//     type: Types.DELETE_DATA,\n//     id,\n//   };\n// };","map":{"version":3,"names":["axios","Types","callAPIStarWar","callAPI","dispatch","data","type","FETCH_POSTS_SUCCESS","random","fetchData","FETCH_POSTS_REQUEST","page","arr","res","get","concat","results","next","index11","Math","floor","length","console","log","handleRandomMe","error","FETCH_POSTS_ERROR","message","handleRandomMachine","RANDOM_MACHINE","RANDOM_ME","loadData","url","response","fetch","responseBody","json","actAddTotal","ADD_TOTAL","actDeleteTotal","RESET_TOTAL","actFetchData","actDeleteData","id","actDeleteCount","actAddCount","actDeleteCount2","actAddCount2"],"sources":["D:/cac ngon ngu/ReactJs/baitap1/src/redux/acction.js"],"sourcesContent":["import axios from \"axios\";\r\nimport * as Types from \"./acctionTypes\";\r\nimport { callAPIStarWar } from \"../services/callAPI\";\r\n\r\nexport const callAPI = () => async (dispatch) => {\r\n  const data = await callAPIStarWar();\r\n  dispatch({\r\n    type: Types.FETCH_POSTS_SUCCESS,\r\n    data: data,\r\n    random: data[0],\r\n  });\r\n};\r\n\r\nexport const fetchData = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: Types.FETCH_POSTS_REQUEST });\r\n    let page = 1;\r\n    let arr = [];\r\n    (async function () {\r\n      let res = await axios.get(\r\n        `https://swapi.dev/api/starships/?page=${page}`\r\n      );\r\n      let data = res && res.data ? res.data : [];\r\n      arr = arr.concat(data.results);\r\n      if (data.next) {\r\n        page += 1;\r\n        let res = await axios.get(\r\n          `https://swapi.dev/api/starships/?page=${page}`\r\n        );\r\n        arr = arr.concat(res.data.results);\r\n        if (data.next) {\r\n          page += 1;\r\n          let res = await axios.get(\r\n            `https://swapi.dev/api/starships/?page=${page}`\r\n          );\r\n          arr = arr.concat(res.data.results);\r\n          if (data.next) {\r\n            page += 1;\r\n            let res = await axios.get(\r\n              `https://swapi.dev/api/starships/?page=${page}`\r\n            );\r\n            arr = arr.concat(res.data.results);\r\n            let index11 = Math.floor(Math.random() * arr.length);\r\n            dispatch({\r\n              type: Types.FETCH_POSTS_SUCCESS,\r\n              data: arr,\r\n              random: arr[index11],\r\n            });\r\n          } else {\r\n            console.log(\"Hết data\");\r\n            return arr;\r\n          }\r\n        }\r\n      }\r\n    })();\r\n    handleRandomMe();\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: Types.FETCH_POSTS_ERROR,\r\n      message: error,\r\n    });\r\n  }\r\n};\r\nexport const handleRandomMachine = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: Types.RANDOM_MACHINE,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: Types.FETCH_POSTS_ERROR,\r\n      message: error,\r\n    });\r\n  }\r\n};\r\nexport const handleRandomMe = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: Types.RANDOM_ME,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: Types.FETCH_POSTS_ERROR,\r\n      message: error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const loadData = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: Types.FETCH_POSTS_REQUEST });\r\n    const url = \"https://jsonplaceholder.typicode.com/posts\";\r\n    const response = await fetch(url);\r\n    const responseBody = await response.json();\r\n\r\n    dispatch({\r\n      type: Types.FETCH_POSTS_SUCCESS,\r\n      data: responseBody,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: Types.FETCH_POSTS_ERROR,\r\n      message: error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const actAddTotal = () => {\r\n  return {\r\n    type: Types.ADD_TOTAL,\r\n  };\r\n};\r\nexport const actDeleteTotal = () => {\r\n  return {\r\n    type: Types.RESET_TOTAL,\r\n  };\r\n};\r\n\r\nexport const actFetchData = (data) => {\r\n  return {\r\n    type: \"data/fetchData\",\r\n    data,\r\n  };\r\n};\r\nexport const actDeleteData = (id) => {\r\n  return {\r\n    type: \"data/deleteData\",\r\n    id,\r\n  };\r\n};\r\nexport const actDeleteCount = (id) => {\r\n  return {\r\n    type: \"countDelete\",\r\n    id,\r\n  };\r\n};\r\nexport const actAddCount = (id) => {\r\n  return {\r\n    type: \"countAdd\",\r\n    id,\r\n  };\r\n};\r\nexport const actDeleteCount2 = (id) => {\r\n  return {\r\n    type: \"countDelete2\",\r\n    id,\r\n  };\r\n};\r\nexport const actAddCount2 = (id) => {\r\n  return {\r\n    type: \"countAdd2\",\r\n    id,\r\n  };\r\n};\r\n// export const actFetchData = (data) => {\r\n//   return {\r\n//     type: Types.FETCH_DATA,\r\n//     data,\r\n//   };\r\n// };\r\n// export const actDeleteData = (id) => {\r\n//   return {\r\n//     type: Types.DELETE_DATA,\r\n//     id,\r\n//   };\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}