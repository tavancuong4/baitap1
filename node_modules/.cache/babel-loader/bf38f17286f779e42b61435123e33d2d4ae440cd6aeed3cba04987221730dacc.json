{"ast":null,"code":"import { FETCH_POSTS_REQUEST, FETCH_POSTS_SUCCESS, FETCH_POSTS_ERROR, RANDOM_ME, RANDOM_MACHINE } from \"../acctionTypes\";\nconst initState = {\n  requesting: false,\n  success: false,\n  message: null,\n  data: [],\n  randomMe: {},\n  randomMachine: {}\n};\nconst DataReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log({\n    state,\n    action\n  });\n  switch (action.type) {\n    case FETCH_POSTS_REQUEST:\n      return {\n        ...state,\n        requesting: true\n      };\n    case FETCH_POSTS_SUCCESS:\n      return {\n        ...state,\n        requesting: false,\n        success: true,\n        data: action.data,\n        randomMe: action.randomMe\n      };\n    case FETCH_POSTS_ERROR:\n      return {\n        ...state,\n        requesting: false,\n        success: false,\n        message: action.message\n      };\n    case RANDOM_ME:\n      let index1 = Math.floor(Math.random() * state.data.length);\n      console.log(\"index *********:\", index1);\n      let dataNew = state.data.splice(index1, 1);\n      console.log(\"dataNew: *****:\", dataNew);\n      let indexNew = Math.floor(Math.random() * state.data.length);\n      let randomNew = state.data[index1] ? state.data[index1] : state.data[indexNew];\n      return {\n        ...state,\n        requesting: false,\n        success: true,\n        // data: dataNew,\n        randomMe: randomNew\n      };\n    case RANDOM_MACHINE:\n      let index2 = Math.floor(Math.random() * state.data.length);\n      console.log(\"index *********:\", index2);\n      state.data.splice(index2, 1);\n      let indexNew2 = Math.floor(Math.random() * state.data.length);\n      let randomNew2 = state.data[index2] ? state.data[index2] : state.data[indexNew2];\n      return {\n        ...state,\n        requesting: false,\n        success: true,\n        // data: dataNew,\n        randomMachine: randomNew2\n      };\n    // case DELETE_ITEM:\n    //   console.log(\"data 1:\", action);\n    //   // let dataNew = state.data.filter((item) => item.id !== action);\n    //   return { ...state, requesting: false, success: true, data: dataNew };\n\n    default:\n      return state;\n  }\n};\n_c = DataReducer;\nexport default DataReducer;\nvar _c;\n$RefreshReg$(_c, \"DataReducer\");","map":{"version":3,"names":["FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","RANDOM_ME","RANDOM_MACHINE","initState","requesting","success","message","data","randomMe","randomMachine","DataReducer","state","arguments","length","undefined","action","console","log","type","index1","Math","floor","random","dataNew","splice","indexNew","randomNew","index2","indexNew2","randomNew2","_c","$RefreshReg$"],"sources":["D:/cac ngon ngu/ReactJs/baitap1/src/redux/reducer/dataReducer.js"],"sourcesContent":["import {\r\n  FETCH_POSTS_REQUEST,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_ERROR,\r\n  RANDOM_ME,\r\n  RANDOM_MACHINE,\r\n} from \"../acctionTypes\";\r\n\r\nconst initState = {\r\n  requesting: false,\r\n  success: false,\r\n  message: null,\r\n  data: [],\r\n  randomMe: {},\r\n  randomMachine: {},\r\n};\r\n\r\nconst DataReducer = (state = initState, action) => {\r\n  console.log({ state, action });\r\n  switch (action.type) {\r\n    case FETCH_POSTS_REQUEST:\r\n      return { ...state, requesting: true };\r\n    case FETCH_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        requesting: false,\r\n        success: true,\r\n        data: action.data,\r\n        randomMe: action.randomMe,\r\n      };\r\n    case FETCH_POSTS_ERROR:\r\n      return {\r\n        ...state,\r\n        requesting: false,\r\n        success: false,\r\n        message: action.message,\r\n      };\r\n    case RANDOM_ME:\r\n      let index1 = Math.floor(Math.random() * state.data.length);\r\n      console.log(\"index *********:\", index1);\r\n      let dataNew = state.data.splice(index1, 1);\r\n      console.log(\"dataNew: *****:\", dataNew);\r\n      let indexNew = Math.floor(Math.random() * state.data.length);\r\n      let randomNew = state.data[index1]\r\n        ? state.data[index1]\r\n        : state.data[indexNew];\r\n      return {\r\n        ...state,\r\n        requesting: false,\r\n        success: true,\r\n        // data: dataNew,\r\n        randomMe: randomNew,\r\n      };\r\n    case RANDOM_MACHINE:\r\n      let index2 = Math.floor(Math.random() * state.data.length);\r\n      console.log(\"index *********:\", index2);\r\n      state.data.splice(index2, 1);\r\n      let indexNew2 = Math.floor(Math.random() * state.data.length);\r\n      let randomNew2 = state.data[index2]\r\n        ? state.data[index2]\r\n        : state.data[indexNew2];\r\n      return {\r\n        ...state,\r\n        requesting: false,\r\n        success: true,\r\n        // data: dataNew,\r\n        randomMachine: randomNew2,\r\n      };\r\n    // case DELETE_ITEM:\r\n    //   console.log(\"data 1:\", action);\r\n    //   // let dataNew = state.data.filter((item) => item.id !== action);\r\n    //   return { ...state, requesting: false, success: true, data: dataNew };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default DataReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}